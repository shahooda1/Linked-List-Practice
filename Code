class Node:
    
    def __init__(self, data):
        self.data = data
        self.next = None
        
class LinkedList:
     
    def __init__(self):
        self.head = None
         
    def insertAtBegin(self, data):
        newNode = Node(data)
        
        if self.head is None:
            self.head = newNode
            return
        else:
            newNode.next = self.head
            self.head = newNode
        
    def insertAtIndex(self, data, index):
        newNode = Node(data)
        currentNode = self.head
        position = 0
        
        if position == index:
            self.insertAtBegin(data)
        else:
            while currentNode is not None and position + 1 != index:
                position += 1
                currentNode = currentNode.next
                
            if currentNode is not None:
                newNode.next = currentNode.next
                currentNode.next = newNode
            else:
                print("Index not present")
                
    def insertAtEnd(self, data):
        newNode = Node(data)
        
        if self.head is None:
            self.head = newNode
            return
        
        currentNode = self.head
        
        while currentNode.next:
            currentNode = currentNode.next
            
        currentNode.next = newNode
        
    def updateNode(self, val, index):
        currentNode = self.head
        position = 0
        
        if position == index:
            currentNode.data = val
        else:
            while currentNode is not None and position != index:
                position += 1
                currentNode = currentNode.next
                
            if currentNode is not None:
                currentNode.data = val
            else:
                print("Index not present")
                
    def removeFirstNode(self):
        if self.head is None:
            return
        
        self.head = self.head.next
        

llist = LinkedList()

llist.insertAtBegin("")



        

